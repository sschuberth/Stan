// Apply third-party plugins.
plugins {
    // We need to hard-code the version here because of
    // https://github.com/gradle/gradle/issues/1697
    id 'org.jetbrains.kotlin.jvm' version '1.2.41'

    id 'com.github.ben-manes.versions' version '0.17.0'
}

// Apply core plugins.
apply plugin: 'application'

mainClassName = 'com.github.sschuberth.stan.Main'

repositories {
    jcenter()
}

sourceSets {
    funTest {
        kotlin.srcDirs 'src/funTest/kotlin'
        resources.srcDirs 'src/funTest/resources'
    }
}

dependencies {
    // By default, the same version as the plugin gets resolved.
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    compile 'com.beust:jcommander:1.74'
    compile 'com.itextpdf:itextpdf:5.5.13'

    // See https://github.com/gradle/gradle/blob/master/subprojects/docs/src/samples/java/withIntegrationTests/build.gradle.
    funTestCompile sourceSets.main.output
    funTestCompile sourceSets.test.output
    funTestCompile configurations.testCompile
    funTestRuntime configurations.testRuntime

    funTestCompile 'io.kotlintest:kotlintest:2.0.7'
    funTestCompile 'com.github.salomonbrys.kotson:kotson:2.5.0'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }

            if (isNonFinalVersion) {
                selection.reject('Release candidate')
            }
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

compileKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = '1.8'
        apiVersion = '1.2'
    }
}

compileTestKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = '1.8'
        apiVersion = '1.2'
    }
}

task funTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    classpath = sourceSets.funTest.runtimeClasspath
    testClassesDirs = sourceSets.funTest.output.classesDirs

    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
    }
}

check.dependsOn funTest
